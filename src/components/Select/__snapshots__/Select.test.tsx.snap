// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src/components/Select should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Select
    onChange={[MockFunction]}
    options={
      Array [
        Object {
          "label": "Public",
          "value": "public",
        },
        Object {
          "label": "Private",
          "value": "private",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <select
        onChange={[MockFunction]}
      >
        <option
          value="public"
        >
          Public
        </option>
        <option
          value="private"
        >
          Private
        </option>
      </select>,
      "className": "Select",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <option
            value="public"
          >
            Public
          </option>,
          <option
            value="private"
          >
            Private
          </option>,
        ],
        "onChange": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "public",
          "nodeType": "host",
          "props": Object {
            "children": "Public",
            "value": "public",
          },
          "ref": null,
          "rendered": "Public",
          "type": "option",
        },
        Object {
          "instance": null,
          "key": "private",
          "nodeType": "host",
          "props": Object {
            "children": "Private",
            "value": "private",
          },
          "ref": null,
          "rendered": "Private",
          "type": "option",
        },
      ],
      "type": "select",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <select
          onChange={[MockFunction]}
        >
          <option
            value="public"
          >
            Public
          </option>
          <option
            value="private"
          >
            Private
          </option>
        </select>,
        "className": "Select",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <option
              value="public"
            >
              Public
            </option>,
            <option
              value="private"
            >
              Private
            </option>,
          ],
          "onChange": [MockFunction],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "public",
            "nodeType": "host",
            "props": Object {
              "children": "Public",
              "value": "public",
            },
            "ref": null,
            "rendered": "Public",
            "type": "option",
          },
          Object {
            "instance": null,
            "key": "private",
            "nodeType": "host",
            "props": Object {
              "children": "Private",
              "value": "private",
            },
            "ref": null,
            "rendered": "Private",
            "type": "option",
          },
        ],
        "type": "select",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
